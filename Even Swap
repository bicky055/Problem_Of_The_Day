//this Question brout Force Approach is easy to understand T.C = O(n*n)

//but according to question do in O(nlogn) time 
//so the approach is preaty simmiler only fouces on x value and when swap and reverse also
// dry run is key part for solved it



vector <int> lexicographicallyLargest(vector <int> &a,int n)
        {
            
            vector<int> ans;
            int x =0;
            ans.push_back(a[0]);
            
            for(int i =1; i<n; i++){
                
                if((a[i] +a[i-1]) % 2 == 0){
                    ans.push_back(a[i]);
                }
                else{
                    sort(ans.begin() + x, ans.end(),greater<int> ());
                    
                    x = i;
                    
                    ans.push_back(a[i]);
                }
              
            }
            
             sort(ans.begin() + x, ans.end(),greater<int> ());
                return ans;
           /*  
            // Brout Force approach O(n^2)
            
            int i=0,j=0;
            
            while( i <n-1){
              j = 0;
                while(j<n-1){
                    if( a[j] < a[j+1] && (a[j] + a[j+1]) %2 == 0){
                        swap(a[j],a[j+1]);
                    }
                    else 
                    j++;
                }
                i++;
            }
            return a;
             */
             
        }
